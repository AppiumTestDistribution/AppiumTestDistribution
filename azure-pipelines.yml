# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

jobs:
  - job: CheckStyle
    pool:
      vmImage: 'macos-10.15'

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.18.1'

      - script: |
          mvn clean install -Dmaven.test.skip=true -Dgpg.skip

        displayName: 'Checkstyle'

  - job: Windows
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.18.1'

    - script: |
         node -v
         npm install -g appium
         appium -v
      displayName: 'Install Appium'

    - powershell: |
        echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
      displayName: 'install Android image'
    - script: |
            $ANDROID_HOME/emulator/emulator -list-avds
            echo '---'
            echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n test_android_emulator -k 'system-images;android-27;google_apis;x86' --force
            echo '---'
            $ANDROID_HOME/emulator/emulator -list-avds
      displayName: 'create AVD'

    - script: |
            $ANDROID_HOME/platform-tools/adb devices
            echo '---'
            nohup $ANDROID_HOME/emulator/emulator -avd test_android_emulator -no-snapshot > /dev/null 2>&1 & $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
            echo '---'
            $ANDROID_HOME/platform-tools/adb devices
      displayName: 'start Android emulator'

    - script: |
         mvn clean -Dtest=Runner test -Dcheckstyle.skip -DPlatform=android

      displayName: 'Run Distribute Android'